---
title: "Alien Encounters"
subtitle: "Visualizing UFO Sightings"
author: "-- DataInk Drinkers"
title-slide-attributes:
  data-background-image: images/bg5.png
  data-background-size: "None"
  data-background-opacity: "0.7"
  data-slide-number: none
format:
  revealjs:
    theme: league
    transition: slide
    background-transition: fade
  
editor: visual
execute:
  echo: false
---

```{r}
#| label: setup
#| include: false

# Plot theme
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 11))

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
```

# What are the number of UFO encounters globally?

## The UFO Footprints

```{r echo=FALSE, warning=FALSE, error=FALSE, message=FALSE, results='hide'}

if(!require(pacman))
  install.packages("pacman")

pacman::p_load(tidyverse,
               dplyr,
               leaflet)

```

```{r q1-plot1, echo=FALSE, warning=FALSE, error=FALSE, message=FALSE}

#> Loading the Dataset 
#> UFO_Sightings

ufo <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/ufo_sightings.csv")

#> Places - 

places <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/places.csv")

#View(ufo)
#View(places)


places_sub <- places |> select(state, country, country_code, latitude, longitude)
places_sub <- places_sub %>% filter(!is.na(latitude) & !is.na(longitude))


places_sub <- places_sub %>%group_by(state) %>%
  mutate(State_Count = n()) %>%
  ungroup()
#View(places_sub)

map <- leaflet(data = places_sub) %>% addTiles()

map <- map %>% addCircleMarkers(lat = ~latitude, lng = ~longitude, color = "#FFAC33", radius = 5, popup = ~paste("Country_code: ", country_code,"<br>Country: ", country, "<br>State: ", state, "<br>count: ", State_Count))

map

```

## The popular Destinations

```{r q1-plot2, echo=FALSE, warning=FALSE, error=FALSE, message=FALSE, fig.align='center', fig.asp=1}

#Installing and loading the required packages
if(!require(pacman))
  install.packages("pacman")

pacman::p_load_gh("jeromefroe/circlepackeR")

pacman::p_load(tidyverse,
               dplyr, 
               plotly, 
               scales, 
               hrbrthemes,
               data.tree,
               htmlwidgets,
               htmltools)

#Reading the data
places <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/places.csv")



#Assigning the countries their respective region
places <- places |>
  mutate(
    region = case_when(
      country_code %in% c("US", "MX", "CA", "CR", "GT", "BZ", "BS", "DO", "HT", "JM", "BM", "SX", "BB", "HN", "LC", "VI", "CU", "PR", "SV", "KN", "KY") ~ "North America",
      
      country_code %in% c("AU", "NZ", "PW", "SB", "GU", "FJ", "TV") ~ "Oceania",
      
      country_code %in% c("IN", "JP", "PK", "ID", "AM", "MY", "PH", "AE", "MV", "TH", "LK", "CN", "KZ", "IQ", "KR", "OM", "JO", "AF", "TW", "IL", "VN", "IR", "BD", "SA", "KW", "HK", "NP", "BN", "SG", "QA", "LA", "BH", "RU", "KH", "LB", "SY", "MM", "UZ", "KG", "TL", "TR", "AZ") ~ "Asia",
      
      country_code %in% c("FR", "GB", "DE", "NO", "CH", "BG", "ES", "LT", "HR", "IE", "NL", "IS", "IT", "FI", "CZ", "EE", "HU", "SE", "PT", "PL", "DK", "CY", "BA", "SK", "RS", "RO", "MT", "BE", "LV", "AL", "AT", "MK", "GR", "BY", "GE", "SI", "LU", "FO", "MD", "UA", "GI", "XK", "ME") ~ "Europe",
      
      country_code %in% c("CO", "BR", "VE", "BO", "AR", "TT", "CL", "PE", "EC", "UY", "PA", "PY", "GY", "SR") ~ "South America",
      
      country_code %in% c("ZA", "MA", "ZW", "AO", "MU", "LS", "NG", "EG", "CM", "UG", "KE", "DZ", "TD", "BW", "ZM", "TZ", "ET", "TN", "SN", "LY", "LR", "GH", "CV", "MW", "SZ") ~ "Africa",
      
      TRUE ~ "Antratica"
    )
  )

#Naming the country name from country_code
places <- places |>
  mutate(
    full_countryname = case_when(
      country_code %in% c("US") ~ "United States",
      country_code %in% c("MX") ~ "Mexico",
      country_code %in% c("CA") ~ "Canada",
      country_code %in% c("MX") ~ "Costa Rica",
      country_code %in% c("GT") ~ "Guatemala",
      country_code %in% c("BZ") ~ "Belize",
      country_code %in% c("BS") ~ "The Bahamas",
      country_code %in% c("DO") ~ "Dominican Republic",
      country_code %in% c("HT") ~ "Haiti",
      country_code %in% c("JM") ~ "Jamaica",
      country_code %in% c("BM") ~ "Bermuda",
      country_code %in% c("SX") ~ "Sint Maarten",
      country_code %in% c("BB") ~ "Barbados",
      country_code %in% c("MX") ~ "Honduras",
      country_code %in% c("LC") ~ "St Lucia",
      country_code %in% c("VI") ~ "U.S Virgin Islands",
      country_code %in% c("CU") ~ "Cuba",
      country_code %in% c("PR") ~ "Puerto Rico",
      country_code %in% c("SV") ~ "El Salvador",
      country_code %in% c("KN") ~ "St Kitts & Nevis",
      country_code %in% c("KY") ~ "Cayman Islands",
      country_code %in% c("AU") ~ "Australia",
      country_code %in% c("NZ") ~ "New Zealand",
      country_code %in% c("PW") ~ "Palau",
      country_code %in% c("SB") ~ "Solomon Islands",
      country_code %in% c("GU") ~ "Guam",
      country_code %in% c("FJ") ~ "Fiji",
      country_code %in% c("IN") ~ "India",
      country_code %in% c("JP") ~ "Japan",
      country_code %in% c("PK") ~ "Pakistan",
      country_code %in% c("ID") ~ "Indonesia",
      country_code %in% c("AM") ~ "Armenia",
      country_code %in% c("MY") ~ "Malaysia",
      country_code %in% c("PH") ~ "Philippines",
      country_code %in% c("AE") ~ "United Arab Emirates",
      country_code %in% c("MV") ~ "Maldives",
      country_code %in% c("TH") ~ "Thailand",
      country_code %in% c("LK") ~ "Sri Lanka",
      country_code %in% c("CN") ~ "China",
      country_code %in% c("KZ") ~ "Kazakhstan",
      country_code %in% c("IQ") ~ "Iraq",
      country_code %in% c("KR") ~ "South Korea",
      country_code %in% c("OM") ~ "Oman",
      country_code %in% c("JO") ~ "Jordan",
      country_code %in% c("AF") ~ "Afghanistan",
      country_code %in% c("TW") ~ "Taiwan",
      country_code %in% c("IL") ~ "Israel",
      country_code %in% c("VN") ~ "Vietnam",
      country_code %in% c("IR") ~ "Iran",
      country_code %in% c("BD") ~ "Bangladesh",
      country_code %in% c("SA") ~ "Saudi Arabia",
      country_code %in% c("KW") ~ "Kuwait",
      country_code %in% c("HK") ~ "Hong Kong",
      country_code %in% c("NP") ~ "Nepal",
      country_code %in% c("BN") ~ "Brunei",
      country_code %in% c("SG") ~ "Singapore",
      country_code %in% c("QA") ~ "Qatar",
      country_code %in% c("LA") ~ "Laos",
      country_code %in% c("BH") ~ "Bahrain",
      country_code %in% c("RU") ~ "Russia",
      country_code %in% c("KH") ~ "Cambodia",
      country_code %in% c("LB") ~ "Lebanon",
      country_code %in% c("SY") ~ "Syria",
      country_code %in% c("MM") ~ "Myanmar",
      country_code %in% c("UZ") ~ "Uzbekistan",
      country_code %in% c("KG") ~ "Kyrgyzstan",
      country_code %in% c("TL") ~ "Timor-Leste",
      country_code %in% c("TR") ~ "Turkey",
      country_code %in% c("AZ") ~ "Azerbaijan",
      country_code %in% c("FR") ~ "France",
      country_code %in% c("GB") ~ "United Kingdom",
      country_code %in% c("DE") ~ "Germany",
      country_code %in% c("NO") ~ "Norway",
      country_code %in% c("CH") ~ "Switzerland",
      country_code %in% c("BG") ~ "Bulgaria",
      country_code %in% c("ES") ~ "Spain",
      country_code %in% c("LT") ~ "Lithuania",
      country_code %in% c("HR") ~ "Croatia",
      country_code %in% c("IE") ~ "Ireland",
      country_code %in% c("NL") ~ "Netherlands",
      country_code %in% c("IS") ~ "Iceland",
      country_code %in% c("IT") ~ "Italy",
      country_code %in% c("FI") ~ "Finland",
      country_code %in% c("CZ") ~ "Czechia",
      country_code %in% c("EE") ~ "Estonia",
      country_code %in% c("HU") ~ "Hungary",
      country_code %in% c("SE") ~ "Sweden",
      country_code %in% c("PT") ~ "Portugal",
      country_code %in% c("PL") ~ "Poland",
      country_code %in% c("DK") ~ "Denmark",
      country_code %in% c("CY") ~ "Cyprus",
      country_code %in% c("BA") ~ "Bosnia and Herzegovina",
      country_code %in% c("SK") ~ "Slovakia",
      country_code %in% c("RS") ~ "Serbia",
      country_code %in% c("RO") ~ "Romania",
      country_code %in% c("MT") ~ "Malta",
      country_code %in% c("BE") ~ "Belgium",
      country_code %in% c("LV") ~ "Latvia",
      country_code %in% c("AL") ~ "Albania",
      country_code %in% c("AT") ~ "Austria",
      country_code %in% c("MK") ~ "North Macedonia",
      country_code %in% c("GR") ~ "Greece",
      country_code %in% c("BY") ~ "Belarus",
      country_code %in% c("GE") ~ "Georgia",
      country_code %in% c("SI") ~ "Slovenia",
      country_code %in% c("LU") ~ "Luxembourg",
      country_code %in% c("FO") ~ "Faroe Islands",
      country_code %in% c("MD") ~ "Moldova",
      country_code %in% c("UA") ~ "Ukraine",
      country_code %in% c("GI") ~ "Gibraltar",
      country_code %in% c("XK") ~ "Kosovo",
      country_code %in% c("ME") ~ "Montenegro",
      country_code %in% c("CO") ~ "Colombia",
      country_code %in% c("BR") ~ "Brazil",
      country_code %in% c("VE") ~ "Venezuela",
      country_code %in% c("BO") ~ "Bolivia",
      country_code %in% c("AR") ~ "Argentina",
      country_code %in% c("TT") ~ "Trinidad and Tobago",
      country_code %in% c("CL") ~ "Chile",
      country_code %in% c("PE") ~ "Peru",
      country_code %in% c("EC") ~ "Ecuado",
      country_code %in% c("UY") ~ "Ecuado",
      country_code %in% c("PA") ~ "Panama",
      country_code %in% c("PY") ~ "Paraguay",
      country_code %in% c("GY") ~ "Guyana",
      country_code %in% c("SR") ~ "Suriname",
      country_code %in% c("ZA") ~ "South Africa",
      country_code %in% c("MA") ~ "Morocco",
      country_code %in% c("ZW") ~ "Zimbabwe",
      country_code %in% c("AO") ~ "Angola",
      country_code %in% c("MU") ~ "Mauritius",
      country_code %in% c("LS") ~ "Lesotho",
      country_code %in% c("NG") ~ "Nigeria",
      country_code %in% c("EG") ~ "Egypt",
      country_code %in% c("CM") ~ "Cameroon",
      country_code %in% c("UG") ~ "Uganda",
      country_code %in% c("KE") ~ "Kenya",
      country_code %in% c("DZ") ~ "Algeria",
      country_code %in% c("TD") ~ "Chad",
      country_code %in% c("BW") ~ "Botswana",
      country_code %in% c("ZM") ~ "Zambia",
      country_code %in% c("TZ") ~ "Tanzania",
      country_code %in% c("ET") ~ "Ethiopia",
      country_code %in% c("TN") ~ "Tunisia",
      country_code %in% c("SN") ~ "Senegal",
      country_code %in% c("LY") ~ "Libya",
      country_code %in% c("LR") ~ "Liberia",
      country_code %in% c("GH") ~ "Ghana",
      country_code %in% c("CV") ~ "Cabo Verde",
      country_code %in% c("MW") ~ "Malawi",
      country_code %in% c("SZ") ~ "Eswatini",
      country_code %in% c("TV") ~ "Tuvalu",
      TRUE ~ "Unknow Places"
    )
  )



#Counting the occurrence of UFO sightings in across the cities in each region
country_count <- places |>
  group_by(country_code, region, full_countryname) |>
  summarise(country_ufo_sighting = n(), .groups = "drop") |>
  ungroup()


#Plotting the Circular Packing
country_count$patching <- paste("world", country_count$region, 
                                country_count$country_code,
                                paste(country_count$full_countryname, 
                                      country_count$country_ufo_sighting,
                                      sep =  " = "),
                                sep = "/")

circle_pack <- as.Node(country_count, pathName = "patching")

circular_plot <- circlepackeR(circle_pack, size = "country_ufo_sighting", 
                              color_min = "#CCCCFF", color_max = "#702963",
                              width = 1000, height = 800)

#title <- "Occurence of UFO Sightings across the Countries in each Continents"

circular_plot <- div(
  style = "text-align: center;",
  circular_plot
)

circular_plot

```

# How did the trend of UFO sightings vary over years?

## The Trend

```{r, fig.width=14,fig.height=16,echo=FALSE,warning=FALSE, error=FALSE, message=FALSE}
#loading packages
if(!require(pacman))
  install.packages("pacman")
pacman::p_load(tidyverse,
               dplyr,
               ggplot2,
               gridExtra,
               grid)

#loading data
ufo <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/ufo_sightings.csv")
places <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/places.csv")

#mutating 'continent' to ufo dataset
ufo <- ufo |>
  mutate(
    continent = case_when(
      country_code %in% c("US", "MX", "CA", "CR", "GT", "BZ", "BS", "DO", "HT",
                          "JM", "BM", "SX", "BB", "HN", "LC", "VI", "CU", "PR", 
                          "SV", "KN", "KY") ~ "North America",
      country_code %in% c("AU", "NZ", "PW", "SB", "GU", "FJ", "TV") ~ "Australia and Oceania",
      country_code %in% c("IN", "JP", "PK", "ID", "AM", "MY", "PH", "AE", "MV", 
                          "TH", "LK", "CN", "KZ", "IQ", "KR", "OM", "JO", "AF",
                          "TW", "IL", "VN", "IR", "BD", "SA", "KW", "HK", "NP", 
                          "BN", "SG", "QA", "LA", "BH", "RU", "KH", "LB", "SY", 
                          "MM", "UZ", "KG", "TL","TR","AZ") ~ "Asia",
      country_code %in% c("FR", "GB", "DE", "NO", "CH", "BG", "ES", "LT", "HR",
                          "IE", "NL", "IS", "IT", "FI", "CZ", "EE", "HU", "SE", 
                          "PT", "PL", "DK", "CY", "BA", "SK", "RS", "RO", "MT", 
                          "BE", "LV", "AL", "AT", "MK", "GR", "BY", "GE", "SI", 
                          "LU", "FO", "MD", "UA", "GI", "XK", "ME") ~ "Europe",
      country_code %in% c("CO", "BR", "VE", "BO", "AR", "TT", "CL", "PE", "EC", 
                          "UY", "PA", "PY", "GY", "SR") ~ "South America",
      country_code %in% c("ZA", "MA", "ZW", "AO", "MU", "LS", "NG", "EG", "CM",
                          "UG", "KE", "DZ", "TD", "BW", "ZM", "TZ", "ET", "TN", 
                          "SN", "LY", "LR", "GH", "CV", "MW", "SZ") ~ "Africa",
      TRUE ~ "Antratica"
    )
  )

#extracting year from reported_date_time_utc variable
ufo<-ufo|>
  mutate(year=year(as.Date.character(reported_date_time_utc)))

#counting by grouping year and country code
ufo<-ufo|>
  group_by(year, country_code)|>
  mutate(count=n())

#plotting Africa data 
a<-ggplot(subset(ufo,continent=="Africa"),mapping=aes(x=year))+
  geom_density(color = "darkgreen",size=1)+
  labs(x = "Year",y = "Density",title = "Africa")+
  theme(axis.title=element_text(size=15),
        title=element_text(size=20))
#plotting North America data
b<-ggplot(subset(ufo,continent=="North America"),mapping=aes(x=year))+
  geom_density(color = "darkred",size=1)+
  labs(x = "Year",y = "Density",title = "North America")+
  theme(axis.title=element_text(size=15),
        title=element_text(size=20))
#plotting Australia and Oceania data
c<-ggplot(subset(ufo,continent=="Australia and Oceania"),mapping=aes(x=year))+
  geom_density(color = "darkorange",size=1)+
  labs(x = "Year",y = "Density",title = "Australia and Oceania")+
  theme(axis.title=element_text(size=15),
        title=element_text(size=20))
#plotting Asia data
d<-ggplot(subset(ufo,continent=="Asia"),mapping=aes(x=year))+
  geom_density(color = "darkblue",size=1)+
  labs(x = "Year",y = "Density",title = "Asia")+
  theme(axis.title=element_text(size=15),
        title=element_text(size=20))
#plotting Europe data
e<-ggplot(subset(ufo,continent=="Europe"),mapping=aes(x=year))+
  geom_density(colour = "darkgrey",size=1)+
  labs(x = "Year",y = "Density",title = "Europe")+
  theme(axis.title=element_text(size=15),
        title=element_text(size=20))
#plotting South America data
f<-ggplot(subset(ufo,continent=="South America"),mapping=aes(x=year))+
  geom_density(color = "darkviolet",size=1)+
  labs(x = "Year",y = "Density",title = "South America")+
  theme(axis.title=element_text(size=15),
        title=element_text(size=20))

#arranging all the plots in one frame
grid.arrange(a,b,c,d,e,f,nrow=4,ncol=2,
             top = textGrob("Variation in UFO sightings over the years\n",gp=gpar(fontsize=40,face = "bold")))



```

## Understanding Twilight

![Types of twilight - [source: science.howstuffworks.com](https://science.howstuffworks.com/nature/climate-weather/atmospheric/twilight-dusk.htm)](images/twilight.jpg){width="6in"}

## The Confrontation

```{r, fig.width=14,fig.height=7, echo=FALSE, warning=FALSE, error=FALSE, message=FALSE}
# Libraries required
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(ggpubr)
library(jpeg)
library(png)



# Loading data
data <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/ufo_sightings.csv")

# N=Removing NAs from the data
noNAData <- na.omit(data)

# Extracting the "day_partcolumn from the dataset"
dp <- noNAData |>
 count(day_part)

# Creating  new columns to generate a new dataframe
c1 <- dp[,1]
c2 <- dp[,2]

# Creating a new data-frame with the day-parts and the number of sightings
new <- data.frame(c1,c2) 



# Importing the background image
img <- readPNG("images/img7.png")

# Customizing y-axis ticks
 y_ticks <- c("Civil dawn", "Nautical dawn", "Astronomical dawn", "Civil dusk","Morning","Nautical dusk", "Astronomical dusk", "Afternoon", "Night")

 
# Generating the plot
ggplot(new, aes(x=c2,y = reorder(c1,c2), fill = c1)) +
  background_image(img)+
  geom_bar(stat = "identity",color="white") +
  theme_minimal()+
  scale_fill_grey() +
  scale_y_discrete(labels= y_ticks)+
  ggtitle("Sighting UFOs at distinct day-parts\n") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20))+
  labs(x = "\nNo. of sightings",
       y = "Parts of the Day\n")+
  theme(axis.title.x = element_text(size = 14, face = "bold", hjust = 0.5),
        axis.title.y = element_text(size = 14, face = "bold", hjust = 0.5),
        axis.text.x = element_text(face="bold", size= 11),
        axis.text.y = element_text(face="bold", size= 11),
        legend.position="none",
        plot.margin = margin(t = 1,  # Top margin
                             r = 4,  # Right margin
                             b = 1,  # Bottom margin
                             l = 1,  # Left margin
                             unit = "lines"))+
  geom_text(x = 50000, # Set the position of the text to always be at '50000'
            hjust = 0,
            size = 4,
            label = c2)+
  coord_cartesian(clip = "off")
  
```

## Thank you !! {style="text-align: center"}

![](images/gif1.gif){fig-align="center" width="150"}
